static int grad3[36] = { {1,1,0}, {-1,1,0}, {1,-1,0}, {-1,-1,0}, {1,0,1}, {-1,0,1}, {1,0,-1}, {-1,0,-1}, {0,1,1}, {0,-1,1}, {0,1,-1}, {0,-1,-1} };

//static int perm[512] = { 169, 129, 19, 102, 202, 100, 213, 222, 42, 20, 213, 224, 232, 66, 222, 131, 101, 56, 44, 1, 60, 254, 110, 31, 29, 95, 28, 56,
//40, 96, 1, 216, 127, 177, 49, 59, 0, 33, 109, 87, 146, 220, 64, 54, 31, 147, 59, 24, 239, 45, 213, 49, 252, 8, 154, 71, 57, 249, 194, 54, 211, 11, 165,
//71, 216, 44, 192, 118, 118, 151, 146, 114, 92, 108, 190, 137, 100, 106, 73, 184, 170, 86, 101, 39, 69, 167, 32, 231, 98, 77, 174, 148, 122, 93, 211, 183,
//106, 49, 147, 55, 134, 229, 252, 120, 57, 74, 184, 197, 109, 150, 216, 65, 1, 66, 231, 109, 35, 161, 105, 151, 55, 40, 218, 179, 57, 12, 82, 172, 46, 28,
//166, 231, 134, 253, 77, 141, 203, 74, 120, 160, 22, 1, 113, 253, 251, 13, 221, 207, 214, 31, 19, 159, 207, 178, 112, 155, 252, 4, 213, 227, 111, 37, 225,
//88, 63, 206, 110, 230, 222, 104, 12, 36, 221, 62, 164, 149, 124, 209, 45, 48, 113, 55, 214, 2, 216, 21, 19, 79, 18, 90, 76, 145, 52, 27, 184, 30, 233, 49,
//140, 210, 72, 41, 25, 246, 119, 68, 86, 38, 152, 177, 220, 159, 187, 14, 64, 89, 36, 95, 167, 220, 6, 214, 86, 192, 14, 22, 253, 52, 17, 174, 76, 175, 215,
//57, 217, 28, 143, 16, 251, 173, 168, 149, 52, 75, 83, 29, 212, 71, 115, 59, 3, 146, 86, 244, 157, 37, 169, 129, 19, 102, 202, 100, 213, 222, 42, 20, 213, 224,
//232, 66, 222, 131, 101, 56, 44, 1, 60, 254, 110, 31, 29, 95, 28, 56, 40, 96, 1, 216, 127, 177, 49, 59, 0, 33, 109, 87, 146, 220, 64, 54, 31, 147, 59, 24, 239,
//45, 213, 49, 252, 8, 154, 71, 57, 249, 194, 54, 211, 11, 165, 71, 216, 44, 192, 118, 118, 151, 146, 114, 92, 108, 190, 137, 100, 106, 73, 184, 170, 86, 101, 39,
//69, 167, 32, 231, 98, 77, 174, 148, 122, 93, 211, 183, 106, 49, 147, 55, 134, 229, 252, 120, 57, 74, 184, 197, 109, 150, 216, 65, 1, 66, 231, 109, 35, 161, 105,
//151, 55, 40, 218, 179, 57, 12, 82, 172, 46, 28, 166, 231, 134, 253, 77, 141, 203, 74, 120, 160, 22, 1, 113, 253, 251, 13, 221, 207, 214, 31, 19, 159, 207, 178,
//112, 155, 252, 4, 213, 227, 111, 37, 225, 88, 63, 206, 110, 230, 222, 104, 12, 36, 221, 62, 164, 149, 124, 209, 45, 48, 113, 55, 214, 2, 216, 21, 19, 79, 18, 90,
//76, 145, 52, 27, 184, 30, 233, 49, 140, 210, 72, 41, 25, 246, 119, 68, 86, 38, 152, 177, 220, 159, 187, 14, 64, 89, 36, 95, 167, 220, 6, 214, 86, 192, 14, 22, 253,
//52, 17, 174, 76, 175, 215, 57, 217, 28, 143, 16, 251, 173, 168, 149, 52, 75, 83, 29, 212, 71, 115, 59, 3, 146, 86, 244, 157, 37 };
//uniform int perm[512];
uniform StructuredBuffer<int> perm;


#define aThird (1.0 / 3.0)
#define G3 (1.0 / 6.0)

#define fastfloor(x) x > 0 ? int(x) : int(x) - 1

float dotF(int gi, float x, float y, float z) {
	return grad3[gi] * x + grad3[gi + 1] * y + grad3[gi + 2] * z;
}

float Noise(float3 pos) {

	float n0, n1, n2, n3;

	float s = (pos.x + pos.y + pos.z) * aThird;
	int3 ijk = int3(fastfloor(pos.x + s), fastfloor(pos.y + s), fastfloor(pos.z + s));
	float t = (ijk.x + ijk.y + ijk.z) * G3;
	float3 xyz = ijk - t;
	xyz = pos - xyz;

	#define x0 xyz.x
	#define y0 xyz.y
	#define z0 xyz.z
	#define i ijk.x
	#define j ijk.y
	#define k ijk.z

	int i1, j1, k1;
	int i2, j2, k2;
	if (x0 >= y0) {
		if (y0 >= z0) {
			i1 = 1;
			j1 = 0;
			k1 = 0;
			i2 = 1;
			j2 = 1;
			k2 = 0;
		}
		else if (x0 >= z0) {
			i1 = 1;
			j1 = 0;
			k1 = 0;
			i2 = 1;
			j2 = 0;
			k2 = 1;
		}
		else {
			i1 = 0;
			j1 = 0;
			k1 = 1;
			i2 = 1;
			j2 = 0;
			k2 = 1;
		}
	}
	else {
		if (y0 < z0) {
			i1 = 0;
			j1 = 0;
			k1 = 1;
			i2 = 0;
			j2 = 1;
			k2 = 1;
		}
		else if (x0 < z0) {
			i1 = 0;
			j1 = 1;
			k1 = 0;
			i2 = 0;
			j2 = 1;
			k2 = 1;
		}
		else {
			i1 = 0;
			j1 = 1;
			k1 = 0;
			i2 = 1;
			j2 = 1;
			k2 = 0;
		}
	}

	float x1 = x0 - i1 + G3;
	float y1 = y0 - j1 + G3;
	float z1 = z0 - k1 + G3;
	float x2 = x0 - i2 + 2.0 * G3;
	float y2 = y0 - j2 + 2.0 * G3;
	float z2 = z0 - k2 + 2.0 * G3;
	float x3 = x0 - 1.0 + 3.0 * G3;
	float y3 = y0 - 1.0 + 3.0 * G3;
	float z3 = z0 - 1.0 + 3.0 * G3;

	int ii = i & 255;
	int jj = j & 255;
	int kk = k & 255;
	int gi0 = perm[ii + perm[jj + perm[kk]]] % 12u * 3;
	int gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1]]] % 12u * 3;
	int gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2]]] % 12u * 3;
	int gi3 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1]]] % 12u * 3;

	float t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;
	if (t0 < 0)
		n0 = 0.0; else {
		t0 *= t0;
		n0 = t0 * t0 * dotF(gi0, x0, y0, z0);
	}
	float t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;
	if (t1 < 0)
		n1 = 0.0; else {
		t1 *= t1;
		n1 = t1 * t1 * dotF(gi1, x1, y1, z1);
	}
	float t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;
	if (t2 < 0)
		n2 = 0.0; else {
		t2 *= t2;
		n2 = t2 * t2 * dotF(gi2, x2, y2, z2);
	}
	float t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;
	if (t3 < 0)
		n3 = 0.0; else {
		t3 *= t3;
		n3 = t3 * t3 * dotF(gi3, x3, y3, z3);
	}

	return 32.0 * (n0 + n1 + n2 + n3);
}

static float finalNoiseValue = 0.0;
static float amplitude = 1.0;
static float totalAmplitude = 0.0;
static float freq = 1.0;

float NoiseCombinedOctaves(float3 pos) {	

	for (int o = 0; o < 3; o++) {
		amplitude *= falloff;
		totalAmplitude += amplitude;
		finalNoiseValue += Noise(pos * freq) * amplitude;
		freq *= 2.0;
	}

	return saturate(finalNoiseValue / totalAmplitude * 0.5 + 0.5);
	//return finalNoiseValue / totalAmplitude * 0.5 + 0.5;
}
